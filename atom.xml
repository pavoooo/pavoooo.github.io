<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>pavoooo的博客</title>
  <subtitle>好记性不如烂笔头</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://pavoooo.com/"/>
  <updated>2017-08-24T17:21:13.000Z</updated>
  <id>http://pavoooo.com/</id>
  
  <author>
    <name>pavoooo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vim你 should know</title>
    <link href="http://pavoooo.com/2017/08/13/vim%E4%BD%A0-should-know/"/>
    <id>http://pavoooo.com/2017/08/13/vim你-should-know/</id>
    <published>2017-08-13T14:16:49.000Z</published>
    <updated>2017-08-24T17:21:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>前阶段<code>stackoverflow</code>官方爆出“拯救人最多的问题是什么？”，让人深感意外的答案是“怎么退出vim编辑器”。很多人听了不禁一笑，但同时也反映出<code>vim</code>的使用之广泛。为了不再让小伙伴有上面这种烦恼，下面就简简单单的介绍一下<code>vim</code>这个神奇玩意，我们应该怎么玩。</p>
<h3 id="什么是vim"><a href="#什么是vim" class="headerlink" title="什么是vim?"></a>什么是<code>vim</code>?</h3><p>相信很多人不止听说过<code>vim</code>，还听说过它的一个孪生兄弟<code>vi</code>。的确，在很多的情况下，我们可以将其视为同一个东西，也可以认为<code>vim</code>是<code>vi</code>的升级版本。那到底什么是<code>vim</code>呢？简单的说，<code>vim</code>就是<code>linux</code>系统内置的一个文本编辑器，不仅具有程序编辑的能力，还可以高亮显示关键字体。所以我们也可以称其为’程序编辑器’，在服务器领域，应用颇为广泛。</p>
<h3 id="三种模式"><a href="#三种模式" class="headerlink" title="三种模式"></a>三种模式</h3><p><code>vim</code>有常见的三种模式：</p>
<ul>
<li><p><code>一般模式</code>：这个是默认的模式，当我们通过<code>vim</code>命令打开一个文件的时候，就进入了这个模式。在这个模式下，我们可以通过键盘来移动光标，删除字符和行，也可以复制、粘贴我们的数据。</p>
</li>
<li><p><code>编辑模式</code>：在一般模式下，我们是无法编辑文件的内容的。所以，为了进行文件内容的编辑，我们需要进入编辑模式。在一般模式下，我们可以按下<code>i</code>,<code>I</code>,<code>o</code>,<code>O</code>,<code>a</code>,<code>A</code>等任一字符进入到编辑模式。</p>
</li>
<li><p><code>命令行模式</code>：这个模式同样是在一般模式下使用的，通过按下<code>:</code>,<code>/</code>,<code>?</code>等任一个字符就可以进入命令行模式，在这个模式下，我们可以进行文件的查找、替换、退出<code>vim</code>等一系列的操作。</p>
</li>
</ul>
<h3 id="一个常见的编辑流程"><a href="#一个常见的编辑流程" class="headerlink" title="一个常见的编辑流程"></a>一个常见的编辑流程</h3><ul>
<li><p>通过<code>vim</code>打开一个文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim vim.txt</div></pre></td></tr></table></figure>
</li>
<li><p>按下<code>i</code>进入编辑模式，输入内容。</p>
</li>
<li>按下<code>[Esc]</code>退出编辑模式。</li>
<li>输入<code>:wq</code>，按下回车，保存退出文件。</li>
</ul>
<h3 id="常用命令和按键组合"><a href="#常用命令和按键组合" class="headerlink" title="常用命令和按键组合"></a>常用命令和按键组合</h3><p><strong>1. 移动光标</strong></p>
<ul>
<li><code>h或左箭头</code>：向左移动一个字符</li>
<li><code>l或右箭头</code>：向右移动一个字符</li>
<li><code>j或下箭头</code>：向下移动一个字符</li>
<li><code>k或上箭头</code>：向上移动一个字符<blockquote>
<p>除了移动一个字符，我们也可以喝数字配合移动多个字符。如10j，表示的是向下移动10行。</p>
</blockquote>
</li>
</ul>
<p><strong>2. 翻页组合键</strong></p>
<ul>
<li><code>Ctrl+f</code>：屏幕向下移动一页</li>
<li><code>Ctrl+b</code>：屏幕向上移动一页</li>
<li><code>Ctrl+d</code>：屏幕向下移动半页</li>
<li><code>Ctrl+u</code>：屏幕向上移动半页</li>
</ul>
<p><strong>3. 位置移动</strong></p>
<ul>
<li><code>+</code>：光标移动到非空格符的下一行</li>
<li><code>-</code>：光标移动到非空格符的上一行</li>
<li><code>n&lt;space&gt;</code>：光标在同一行向右移动n个字符</li>
<li><code>0</code>：移动到行首</li>
<li><code>$</code>：移动到行尾</li>
<li><code>H</code>：移动到屏幕最上方行首</li>
<li><code>M</code>：移动到屏幕最中央行首</li>
<li><code>L</code>：移动到最下方行首</li>
<li><code>G</code>：移动到文件最后一行</li>
<li><code>nG</code>：移动到文件的第n行</li>
<li><code>gg</code>：移动到文件行首</li>
<li><code>n&lt;enter&gt;</code>：文件向下移动n行</li>
</ul>
<p><strong>4. 查找和替换</strong></p>
<ul>
<li><code>/word</code>：向下查找值为<code>word</code>的字符</li>
<li><code>?word</code>：向上查找值为<code>word</code>的字符</li>
<li><code>n</code>：在查找模式下，沿着相同的方向寻找下一个所查找的字符</li>
<li><code>N</code>：在查找模式下，沿着相反的方向寻找下一个所查找的字符</li>
<li><code>:n1,n2s/word1/word2/g</code>：将第<code>n1</code>和第<code>n2</code>行的<code>word1</code>替换成<code>word2</code>。<code>g</code> 表示的是全部替换。<code>n2</code>为<code>$</code>的时候，表示的是最后一行。</li>
</ul>
<p><strong>5. 删除、复制、粘贴</strong></p>
<ul>
<li><code>x/X</code>：<code>x</code> 表示向后删除一个字符，<code>X</code>表示向前删除一个字符。</li>
<li><code>nx</code>：表示向后删除<code>n</code>个字符</li>
<li><code>dd</code>：删除光标所在的那一行</li>
<li><code>ndd</code>：删除光标所在及下面的<code>n</code>行</li>
<li><code>d1G</code> ：删除从光标所在行到第一行的所有的数据</li>
<li><code>dG</code>：删除光标所在行到最后一行的数据</li>
<li><code>d$</code>：删除光标所在处到行尾的所有字符</li>
<li><code>d0</code>：删除光标所在处到行首的所有字符</li>
<li><code>yy</code>：复制光标所在行</li>
<li><code>nyy</code>：复制光标所在行及下面的<code>n</code>行</li>
<li><code>y1G</code> ：复制光标所在行到第一行的所有数据</li>
<li><code>yG</code>：复制光标所在行到最后一行的数据</li>
<li><code>y0</code>：复制光标所在行到行首的数据</li>
<li><code>y$</code>：复制光标所在行到行尾的数据</li>
<li><code>p/P</code>：分别表示在光标所在行的下方和上方粘贴复制的数据</li>
<li><code>J</code>：合并光标所在行和下一行的数据</li>
<li><code>u</code>：撤销操作</li>
</ul>
<p><strong>6. 进入插入模式</strong></p>
<ul>
<li><code>i/I</code>：<code>i</code>表示从光标所在处插入，<code>I</code>表示从光标所在行的第一个非空格字符插入</li>
<li><code>a/A</code>：<code>a</code>表示从光标的下一个字符开始插入，<code>A</code>表示从光标所在行的最后一个字符开始插入。</li>
<li><code>o/O</code>：<code>o</code>在光标所在行的下方插入一个新行，<code>O</code>在光标所在行的上方插入一个新行。</li>
<li><code>r/R</code>：<code>r</code>替换光标所在处的字符，<code>R</code>一直替换光标所在处的字符。</li>
</ul>
<p><strong>7. 保存、退出</strong></p>
<ul>
<li><code>:w</code>：保存</li>
<li><code>:w!</code>：强制保存</li>
<li><code>:q</code>：退出</li>
<li><code>:q!</code>：强制退出</li>
<li><code>:wq</code>：保存并退出</li>
<li><code>:w[filename]</code>：另存为<code>filename</code></li>
<li><code>:r[filename]</code>：读取<code>filename</code> 文件的内容</li>
<li><code>:n1,n2 w [filename]</code>：将第n1和第n2行的内容另存为<code>filename</code></li>
<li><code>:![command]</code>：执行<code>command</code></li>
<li><code>:set nu</code>：显示行号</li>
<li><code>:set nonu</code>：取消行号</li>
</ul>
<p>上面就是对<code>vim</code>编辑器的一个简单介绍，列出了许多命令，熟练掌握这些命令后，就会感觉到<code>vim</code> 你。。。慢慢飞，小心带刺的玫瑰。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前阶段&lt;code&gt;stackoverflow&lt;/code&gt;官方爆出“拯救人最多的问题是什么？”，让人深感意外的答案是“怎么退出vim编辑器”。很多人听了不禁一笑，但同时也反映出&lt;code&gt;vim&lt;/code&gt;的使用之广泛。为了不再让小伙伴有上面这种烦恼，下面就简简单单的介绍
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>webpack性能优化</title>
    <link href="http://pavoooo.com/2017/08/12/webpack%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>http://pavoooo.com/2017/08/12/webpack性能优化/</id>
    <published>2017-08-12T07:20:49.000Z</published>
    <updated>2017-08-13T14:33:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>webpack</code>是当下前端界中最著名的一个模块加载工具，<code>react</code>和<code>vue</code>也都是用其作为项目的开发工具之一。小组最近在二次开发一个开源项目，前端主要使用的技术栈试<code>react+redux+es6</code>。构建工具则采用的是<code>webpack</code>。起初整个项目的<code>2707 modules</code>打包花费时长大概有<code>112s</code>，经过对一番折腾，使整个打包编译时间降到<code>40s</code>左右。</p>
<p>下面是整个项目的<code>webpack.config.js</code>文件，可以参考这个文件进行下面的阅读。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>(<span class="string">"babel-register"</span>);</div><div class="line"><span class="built_in">require</span>(<span class="string">"babel-polyfill"</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="keyword">var</span> webpackPostcssTools = <span class="built_in">require</span>(<span class="string">'webpack-postcss-tools'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</div><div class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</div><div class="line"><span class="keyword">var</span> HtmlWebpackHarddiskPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-harddisk-plugin'</span>);</div><div class="line"><span class="keyword">var</span> UnusedFilesWebpackPlugin = <span class="built_in">require</span>(<span class="string">"unused-files-webpack-plugin"</span>).default;</div><div class="line"><span class="keyword">var</span> BannerWebpackPlugin = <span class="built_in">require</span>(<span class="string">'banner-webpack-plugin'</span>);</div><div class="line"><span class="keyword">var</span> AddAssetHtmlPlugin = <span class="built_in">require</span>(<span class="string">'add-asset-html-webpack-plugin'</span>);</div><div class="line"><span class="keyword">var</span> HappyPack = <span class="built_in">require</span>(<span class="string">'happypack'</span>);</div><div class="line"><span class="keyword">var</span> ParallelUglifyPlugin = <span class="built_in">require</span>(<span class="string">'webpack-parallel-uglify-plugin'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">'underscore'</span>);</div><div class="line"><span class="keyword">var</span> glob = <span class="built_in">require</span>(<span class="string">'glob'</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> chevrotain = <span class="built_in">require</span>(<span class="string">"chevrotain"</span>);</div><div class="line"><span class="keyword">var</span> allTokens = <span class="built_in">require</span>(<span class="string">"./frontend/src/metabase/lib/expressions/tokens"</span>).allTokens;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasArg</span>(<span class="params">arg</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"^"</span> + ((arg.length === <span class="number">2</span>) ? (<span class="string">"-\\w*"</span>+arg[<span class="number">1</span>]+<span class="string">"\\w*"</span>) : (arg)) + <span class="string">"$"</span>);</div><div class="line">    <span class="keyword">return</span> process.argv.filter(regex.test.bind(regex)).length &gt; <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> SRC_PATH = __dirname + <span class="string">'/frontend/src/metabase'</span>;</div><div class="line"><span class="keyword">var</span> BUILD_PATH = __dirname + <span class="string">'/resources/frontend_client'</span>;</div><div class="line"></div><div class="line"><span class="comment">// default NODE_ENV to development</span></div><div class="line"><span class="keyword">var</span> NODE_ENV = process.env[<span class="string">"NODE_ENV"</span>] || <span class="string">"development"</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> IS_WATCHING = hasArg(<span class="string">"-w"</span>) || hasArg(<span class="string">"--watch"</span>);</div><div class="line"><span class="keyword">if</span> (IS_WATCHING) &#123;</div><div class="line">    process.stderr.write(<span class="string">"Warning: in webpack watch mode you must restart webpack if you change any CSS variables or custom media queries\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Babel:</span></div><div class="line"><span class="keyword">var</span> BABEL_CONFIG = &#123;</div><div class="line">    cacheDirectory: <span class="string">".babel_cache"</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// Build mapping of CSS variables</span></div><div class="line"><span class="keyword">var</span> CSS_SRC = glob.sync(SRC_PATH + <span class="string">'/css/**/*.css'</span>);</div><div class="line"><span class="keyword">var</span> CSS_MAPS = &#123; <span class="attr">vars</span>: &#123;&#125;, <span class="attr">media</span>: &#123;&#125;, <span class="attr">selector</span>: &#123;&#125; &#125;;</div><div class="line">CSS_SRC.map(webpackPostcssTools.makeVarMap).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">map</span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> name <span class="keyword">in</span> CSS_MAPS) _.extend(CSS_MAPS[name], map[name]);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// CSS Next:</span></div><div class="line"><span class="keyword">var</span> CSSNEXT_CONFIG = &#123;</div><div class="line">    features: &#123;</div><div class="line">        <span class="comment">// pass in the variables and custom media we scanned for before</span></div><div class="line">        customProperties: &#123; <span class="attr">variables</span>: CSS_MAPS.vars &#125;,</div><div class="line">        customMedia: &#123; <span class="attr">extensions</span>: CSS_MAPS.media &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="keyword">import</span>: &#123;</div><div class="line">        path: [<span class="string">'resources/frontend_client/app/css'</span>]</div><div class="line">    &#125;,</div><div class="line">    compress: <span class="literal">false</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> CSS_CONFIG = &#123;</div><div class="line">    localIdentName: NODE_ENV !== <span class="string">"production"</span> ?</div><div class="line">        <span class="string">"[name]__[local]___[hash:base64:5]"</span> :</div><div class="line">        <span class="string">"[hash:base64:5]"</span>,</div><div class="line">    restructuring: <span class="literal">false</span>,</div><div class="line">    compatibility: <span class="literal">true</span>,</div><div class="line">    url: <span class="literal">false</span>, <span class="comment">// disabled because we need to use relative url()</span></div><div class="line">    importLoaders: <span class="number">1</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// happypack.config</span></div><div class="line"><span class="keyword">var</span> happyPackConfig = &#123;</div><div class="line">    plugins:[</div><div class="line">        <span class="keyword">new</span> HappyPack(&#123;</div><div class="line">           id: <span class="string">'happyBabel'</span>,</div><div class="line">           threads: <span class="number">4</span>,</div><div class="line">           cache: <span class="literal">true</span>,</div><div class="line">           loaders:[</div><div class="line">               &#123;</div><div class="line">                   path: <span class="string">'babel'</span>,</div><div class="line">                   query: BABEL_CONFIG</div><div class="line">               &#125;</div><div class="line">           ]</div><div class="line">        &#125;),</div><div class="line">        <span class="keyword">new</span> HappyPack(&#123;</div><div class="line">            id: <span class="string">'happyEslint'</span>,</div><div class="line">            threads: <span class="number">4</span>,</div><div class="line">            cache: <span class="literal">true</span>,</div><div class="line">            loaders: [<span class="string">'eslint'</span>]</div><div class="line">        &#125;)</div><div class="line">    ]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> config = <span class="built_in">module</span>.exports = &#123;</div><div class="line">    context: SRC_PATH,</div><div class="line">    entry: &#123;</div><div class="line">        <span class="string">"app-main"</span>: <span class="string">'./app-main.js'</span>,</div><div class="line">        <span class="string">"app-public"</span>: <span class="string">'./app-public.js'</span>,</div><div class="line">        <span class="string">"app-embed"</span>: <span class="string">'./app-embed.js'</span>,</div><div class="line">        styles: <span class="string">'./css/index.css'</span>,</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">// output to "dist"</span></div><div class="line">    output: &#123;</div><div class="line">        path: BUILD_PATH + <span class="string">'/app/dist'</span>,</div><div class="line">        filename: <span class="string">'[name].bundle.js?[hash]'</span>,</div><div class="line">        publicPath: <span class="string">'app/dist/'</span></div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="built_in">module</span>: &#123;</div><div class="line">        loaders: [</div><div class="line">            &#123;</div><div class="line">                test: <span class="regexp">/\.(js|jsx)$/</span>,</div><div class="line">                exclude: <span class="regexp">/node_modules/</span>,</div><div class="line">                loader: <span class="string">'HappyPack/loader?id=happyBabel'</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                test: <span class="regexp">/\.(js|jsx)$/</span>,</div><div class="line">                exclude: <span class="regexp">/node_modules|\.spec\.js/</span>,</div><div class="line">                loader: <span class="string">'HappyPack/loader?id=happyEslint'</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                test: <span class="regexp">/\.(eot|woff2?|ttf|svg|png)$/</span>,</div><div class="line">                loader: <span class="string">"file-loader"</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                test: <span class="regexp">/\.json$/</span>,</div><div class="line">                loader: <span class="string">"json-loader"</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                test: <span class="regexp">/\.css$/</span>,</div><div class="line">                loader: ExtractTextPlugin.extract(<span class="string">"style-loader"</span>, <span class="string">"css-loader?"</span> + <span class="built_in">JSON</span>.stringify(CSS_CONFIG) + <span class="string">"!postcss-loader"</span>)</div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    resolve: &#123;</div><div class="line">        extensions: [<span class="string">""</span>, <span class="string">".webpack.js"</span>, <span class="string">".web.js"</span>, <span class="string">".js"</span>, <span class="string">".jsx"</span>, <span class="string">".css"</span>],</div><div class="line">        alias: &#123;</div><div class="line">            <span class="string">'metabase'</span>:             SRC_PATH,</div><div class="line">            <span class="string">'style'</span>:                SRC_PATH + <span class="string">'/css/core/index.css'</span>,</div><div class="line">            <span class="string">'ace'</span>:                  __dirname + <span class="string">'/node_modules/ace-builds/src-min-noconflict'</span>,</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    plugins: [</div><div class="line">        <span class="keyword">new</span> UnusedFilesWebpackPlugin(&#123;</div><div class="line">            globOptions: &#123;</div><div class="line">                ignore: [</div><div class="line">                    <span class="string">"**/types/*.js"</span>,</div><div class="line">                    <span class="string">"**/*.spec.*"</span>,</div><div class="line">                    <span class="string">"**/__support__/*.js"</span></div><div class="line">                ]</div><div class="line">            &#125;</div><div class="line">        &#125;),</div><div class="line">        <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</div><div class="line">            context: __dirname,</div><div class="line">            manifest: <span class="built_in">require</span>(<span class="string">'./manifest.json'</span>),</div><div class="line">            name:<span class="string">"vendors_dll"</span></div><div class="line">        &#125;),</div><div class="line">        <span class="comment">// Extracts initial CSS into a standard stylesheet that can be loaded in parallel with JavaScript</span></div><div class="line">        <span class="comment">// <span class="doctag">NOTE:</span> the filename on disk won't include "?[chunkhash]" but the URL in index.html generated by HtmlWebpackPlugin will:</span></div><div class="line">        <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'[name].bundle.css?[contenthash]'</span>),</div><div class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</div><div class="line">            filename: <span class="string">'../../index.html'</span>,</div><div class="line">            chunks: [<span class="string">"app-main"</span>, <span class="string">"styles"</span>],</div><div class="line">            template: __dirname + <span class="string">'/resources/frontend_client/index_template.html'</span>,</div><div class="line">            inject: <span class="string">'head'</span>,</div><div class="line">            alwaysWriteToDisk: <span class="literal">true</span>,</div><div class="line">        &#125;),</div><div class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</div><div class="line">            filename: <span class="string">'../../public.html'</span>,</div><div class="line">            chunks: [<span class="string">"app-public"</span>, <span class="string">"styles"</span>],</div><div class="line">            template: __dirname + <span class="string">'/resources/frontend_client/index_template.html'</span>,</div><div class="line">            inject: <span class="string">'head'</span>,</div><div class="line">            alwaysWriteToDisk: <span class="literal">true</span>,</div><div class="line">        &#125;),</div><div class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</div><div class="line">            filename: <span class="string">'../../embed.html'</span>,</div><div class="line">            chunks: [<span class="string">"app-embed"</span>, <span class="string">"styles"</span>],</div><div class="line">            template: __dirname + <span class="string">'/resources/frontend_client/index_template.html'</span>,</div><div class="line">            inject: <span class="string">'head'</span>,</div><div class="line">            alwaysWriteToDisk: <span class="literal">true</span>,</div><div class="line">        &#125;),</div><div class="line">        <span class="keyword">new</span> AddAssetHtmlPlugin(&#123;</div><div class="line">            filepath: BUILD_PATH + <span class="string">'/app/dist/*.dll.js'</span>,</div><div class="line">            includeSourcemap: <span class="literal">false</span></div><div class="line">        &#125;),</div><div class="line">        <span class="keyword">new</span> HtmlWebpackHarddiskPlugin(&#123;</div><div class="line">            outputPath: __dirname + <span class="string">'/resources/frontend_client/app/dist'</span></div><div class="line">        &#125;),</div><div class="line">        <span class="keyword">new</span> webpack.DefinePlugin(&#123;</div><div class="line">            <span class="string">'process.env'</span>: &#123;</div><div class="line">                NODE_ENV: <span class="built_in">JSON</span>.stringify(NODE_ENV)</div><div class="line">            &#125;</div><div class="line">        &#125;),</div><div class="line">        <span class="keyword">new</span> BannerWebpackPlugin(&#123;</div><div class="line">            chunks: &#123;</div><div class="line">                <span class="string">'app-main'</span>: &#123;</div><div class="line">                    beforeContent: <span class="string">"/*\n* This file is subject to the terms and conditions defined in\n * file 'LICENSE.txt', which is part of this source code package.\n */\n"</span>,</div><div class="line">                &#125;,</div><div class="line">                <span class="string">'app-public'</span>: &#123;</div><div class="line">                    beforeContent: <span class="string">"/*\n* This file is subject to the terms and conditions defined in\n * file 'LICENSE.txt', which is part of this source code package.\n */\n"</span>,</div><div class="line">                &#125;,</div><div class="line">                <span class="string">'app-embed'</span>: &#123;</div><div class="line">                    beforeContent: <span class="string">"/*\n* This file is subject to the terms and conditions defined in\n * file 'LICENSE-EMBEDDING.txt', which is part of this source code package.\n */\n"</span>,</div><div class="line">                &#125;,</div><div class="line">            &#125;</div><div class="line">        &#125;),</div><div class="line">    ].concat(happyPackConfig.plugins),</div><div class="line"></div><div class="line">    postcss: <span class="function"><span class="keyword">function</span> (<span class="params">webpack</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> [</div><div class="line">            <span class="built_in">require</span>(<span class="string">"postcss-import"</span>)(),</div><div class="line">            <span class="built_in">require</span>(<span class="string">"postcss-url"</span>)(),</div><div class="line">            <span class="built_in">require</span>(<span class="string">"postcss-cssnext"</span>)(CSSNEXT_CONFIG)</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (NODE_ENV === <span class="string">"hot"</span>) &#123;</div><div class="line">    <span class="comment">// suffixing with ".hot" allows us to run both `yarn run build-hot` and `yarn run test` or `yarn run test-watch` simultaneously</span></div><div class="line">    config.output.filename = <span class="string">"[name].hot.bundle.js?[hash]"</span>;</div><div class="line"></div><div class="line">    <span class="comment">// point the publicPath (inlined in index.html by HtmlWebpackPlugin) to the hot-reloading server</span></div><div class="line">    config.output.publicPath = <span class="string">"http://localhost:8080/"</span> + config.output.publicPath;</div><div class="line"></div><div class="line">    config.module.loaders.unshift(&#123;</div><div class="line">        test: <span class="regexp">/\.jsx$/</span>,</div><div class="line">        exclude: <span class="regexp">/node_modules/</span>,</div><div class="line">        loaders: [<span class="string">'react-hot'</span>, <span class="string">'babel?'</span>+<span class="built_in">JSON</span>.stringify(BABEL_CONFIG)]</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">// disable ExtractTextPlugin</span></div><div class="line">    config.module.loaders[config.module.loaders.length - <span class="number">1</span>].loader = <span class="string">"style-loader!css-loader?"</span> + <span class="built_in">JSON</span>.stringify(CSS_CONFIG) + <span class="string">"!postcss-loader"</span></div><div class="line"></div><div class="line">    config.devServer = &#123;</div><div class="line">        hot: <span class="literal">true</span>,</div><div class="line">        inline: <span class="literal">true</span>,</div><div class="line">        contentBase: <span class="string">"frontend"</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    config.plugins.unshift(</div><div class="line">        <span class="keyword">new</span> webpack.NoErrorsPlugin(),</div><div class="line">        <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</div><div class="line">    );</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (NODE_ENV !== <span class="string">"production"</span>) &#123;</div><div class="line">    <span class="comment">// replace minified files with un-minified versions</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> name <span class="keyword">in</span> config.resolve.alias) &#123;</div><div class="line">        <span class="keyword">var</span> minified = config.resolve.alias[name];</div><div class="line">        <span class="keyword">var</span> unminified = minified.replace(<span class="regexp">/[.-\/]min\b/g</span>, <span class="string">''</span>);</div><div class="line">        <span class="keyword">if</span> (minified !== unminified &amp;&amp; fs.existsSync(unminified)) &#123;</div><div class="line">            config.resolve.alias[name] = unminified;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// enable "cheap" source maps in hot or watch mode since re-build speed overhead is &lt; 1 second</span></div><div class="line">    config.devtool = <span class="string">"cheap-module-source-map"</span>;</div><div class="line">    config.output.devtoolModuleFilenameTemplate = <span class="string">'[absolute-resource-path]'</span>;</div><div class="line">    config.output.pathinfo = <span class="literal">true</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    config.plugins.push(<span class="keyword">new</span> ParallelUglifyPlugin(&#123;</div><div class="line">        uglifyJs:&#123;</div><div class="line">            compress: &#123;</div><div class="line">                warnings: <span class="literal">false</span>,</div><div class="line">            &#125;,</div><div class="line">            output: &#123;</div><div class="line">                comments: <span class="literal">false</span>,</div><div class="line">            &#125;,</div><div class="line">            mangle: &#123;</div><div class="line">                except: allTokens.map(<span class="function"><span class="keyword">function</span>(<span class="params">currTok</span>) </span>&#123;</div><div class="line">                    <span class="keyword">return</span> chevrotain.tokenName(currTok);</div><div class="line">                &#125;)</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        cacheDir: <span class="string">'.js-cache'</span></div><div class="line">    &#125;))</div><div class="line"></div><div class="line">    config.devtool = <span class="string">"source-map"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>webpack</code>编译缓慢一直是现代化前端开发的一个痛点。社区中很多优秀的开发者都贡献出非常多的插件来视图解决这个问题。下面就将本文中用到的插件抛出，在下面这几个插件的配合下，编译速度会得到显著的提升。</p>
<ul>
<li><code>happypack</code>: 让<code>loader</code>以多进程去处理文件，借助缓存机制，可以在<code>rebuild</code>的时候更快</li>
<li><code>webpack.DllPlugin</code>: 优先构建<code>npm</code>的第三方包</li>
<li><code>webpack.DllReferencePlugin</code>: 只负责用来引用由<code>webpack.DllPlugin</code>生成的第三方依赖项</li>
<li><code>webpack-parallel-uglify-plugin</code>: 并行压缩<code>javascript</code>文件(生产环境中使用，可以显著的提升构建速度)</li>
</ul>
<p>下面就对这些插件以及我踩下的坑进行一个简单的介绍。</p>
<h3 id="happypack"><a href="#happypack" class="headerlink" title="happypack"></a><code>happypack</code></h3><blockquote>
<p><a href="https://github.com/amireh/happypack" target="_blank" rel="external">https://github.com/amireh/happypack</a></p>
</blockquote>
<p><code>happypack</code>允许<code>webpack</code>并行编译多个文件来提升构建速度。但是在某些情况下，其提升的效果并不是十分明显，这个时候就需要看一下自己电脑的<code>cpu</code>占用率，以及进程的运行情况。</p>
<p><code>happypack</code>作为<code>webpack</code>的一个插件，所以在使用之前应该先安装。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yarn add happywebpack -D</div></pre></td></tr></table></figure>
<p>配置过程很简单，只需要在<code>plugins</code>选项中创建其实例，可以创建一个或多个，然后在<code>loader</code>中引用即可。只需要注意一点，当创建多个<code>happypack</code>的实例的时候，给每个实例传递一个<code>id</code>参数。基本的变动如下：</p>
<p><strong>原配置文件</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 省略了部分的配置文件</span></div><div class="line"><span class="keyword">var</span> config = <span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="comment">//................</span></div><div class="line">    <span class="built_in">module</span>: &#123;</div><div class="line">        loaders: [</div><div class="line">            &#123;</div><div class="line">                test: <span class="regexp">/\.(js|jsx)$/</span>,</div><div class="line">                exclude: <span class="regexp">/node_modules/</span>,</div><div class="line">                loader: <span class="string">'babel'</span>,</div><div class="line">                query: BABEL_CONFIG</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                test: <span class="regexp">/\.(js|jsx)$/</span>,</div><div class="line">                exclude: <span class="regexp">/node_modules|\.spec\.js/</span>,</div><div class="line">                loader: <span class="string">'eslint'</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                test: <span class="regexp">/\.(eot|woff2?|ttf|svg|png)$/</span>,</div><div class="line">                loader: <span class="string">"file-loader"</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                test: <span class="regexp">/\.json$/</span>,</div><div class="line">                loader: <span class="string">"json-loader"</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                test: <span class="regexp">/\.css$/</span>,</div><div class="line">                loader: ExtractTextPlugin.extract(<span class="string">"style-loader"</span>, <span class="string">"css-loader?"</span> + <span class="built_in">JSON</span>.stringify(CSS_CONFIG) + <span class="string">"!postcss-loader"</span>)</div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//...............</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>改动如下</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// happypack.config：更多的配置可以参考文档，按需索取。</span></div><div class="line"><span class="keyword">var</span> happyPackConfig = &#123;</div><div class="line">    plugins:[</div><div class="line">        <span class="keyword">new</span> HappyPack(&#123;</div><div class="line">           id: <span class="string">'happyBabel'</span>,</div><div class="line">           threads: <span class="number">4</span>,</div><div class="line">           cache: <span class="literal">true</span>,</div><div class="line">           loaders:[</div><div class="line">               &#123;</div><div class="line">                   path: <span class="string">'babel'</span>,</div><div class="line">                   query: BABEL_CONFIG</div><div class="line">               &#125;</div><div class="line">           ]</div><div class="line">        &#125;),</div><div class="line">        <span class="keyword">new</span> HappyPack(&#123;</div><div class="line">            id: <span class="string">'happyEslint'</span>,</div><div class="line">            threads: <span class="number">4</span>,</div><div class="line">            cache: <span class="literal">true</span>,</div><div class="line">            loaders: [<span class="string">'eslint'</span>]</div><div class="line">        &#125;)</div><div class="line">    ]</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> config = <span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="comment">//................</span></div><div class="line">    <span class="built_in">module</span>: &#123;</div><div class="line">        loaders: [</div><div class="line">            <span class="comment">// 变动这两个</span></div><div class="line">            &#123;</div><div class="line">                test: <span class="regexp">/\.(js|jsx)$/</span>,</div><div class="line">                exclude: <span class="regexp">/node_modules/</span>,</div><div class="line">                loader: <span class="string">'HappyPack/loader?id=happyBabel'</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                test: <span class="regexp">/\.(js|jsx)$/</span>,</div><div class="line">                exclude: <span class="regexp">/node_modules|\.spec\.js/</span>,</div><div class="line">                loader: <span class="string">'HappyPack/loader?id=happyEslint'</span></div><div class="line">            &#125;,</div><div class="line">            <span class="comment">// 其它的并未改动</span></div><div class="line">            &#123;</div><div class="line">                test: <span class="regexp">/\.(eot|woff2?|ttf|svg|png)$/</span>,</div><div class="line">                loader: <span class="string">"file-loader"</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                test: <span class="regexp">/\.json$/</span>,</div><div class="line">                loader: <span class="string">"json-loader"</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                test: <span class="regexp">/\.css$/</span>,</div><div class="line">                loader: ExtractTextPlugin.extract(<span class="string">"style-loader"</span>, <span class="string">"css-loader?"</span> + <span class="built_in">JSON</span>.stringify(CSS_CONFIG) + <span class="string">"!postcss-loader"</span>)</div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//...............</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 在module.loader中引用</span></div></pre></td></tr></table></figure></p>
<p>然后，当我们运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yarn run build</div></pre></td></tr></table></figure></p>
<p>就会看到如下输出：<br><img src="/images/happypack.jpeg" alt="happypack"><br>大概意思就是，<code>happupack</code>的版本是<code>3.1.0</code>，对<code>babel-loader</code>开启了四个线程并从缓存中加载了<code>627</code>个模块。</p>
<h3 id="webpack-DllPlugin和webpack-DllReferencePlugin"><a href="#webpack-DllPlugin和webpack-DllReferencePlugin" class="headerlink" title="webpack.DllPlugin和webpack.DllReferencePlugin"></a><code>webpack.DllPlugin</code>和<code>webpack.DllReferencePlugin</code></h3><p>这两个插件在使用的时候，还是有几个小坑的，下面就会为大家讲述几个。</p>
<p>先说一下基本的用法，官方推荐在使用的时候，我们需要写两个<code>webpack</code>配置文件。其中一个配置文件主要用于<code>webpack.DllPlugin</code>插件进行第三方的预打包，另一个则是主<code>webpack</code>配置文件，在其中使用<code>webpack.DllReferencePlugin</code>插件引用第三方生成的依赖模块。</p>
<p>所以，我们其中一个配置文件可以命名如下：<code>ddl.config.js</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</div><div class="line"><span class="keyword">const</span> vendors = <span class="built_in">Object</span>.keys(<span class="built_in">require</span>(<span class="string">'package.json'</span>)[<span class="string">'dependencies'</span>])</div><div class="line"><span class="keyword">const</span> SRC_PATH = __dirname + <span class="string">'/frontend/src/metabase'</span></div><div class="line"><span class="keyword">const</span> BUILD_PATH = __dirname + <span class="string">'/resources/frontend_client'</span></div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  output: &#123;</div><div class="line">    path: BUILD_PATH + <span class="string">'/app/dist'</span>,</div><div class="line">    filename: <span class="string">'[name].dll.js'</span>,</div><div class="line">    library: <span class="string">'[name]_dll'</span>,</div><div class="line">  &#125;,</div><div class="line">  entry: &#123;</div><div class="line">    <span class="comment">// 第三方依赖设置为打包的入口</span></div><div class="line">    vendors: vendors,</div><div class="line">  &#125;,</div><div class="line">  plugins: [</div><div class="line">    <span class="keyword">new</span> webpack.DllPlugin(&#123;</div><div class="line">      path: <span class="string">'manifest.json'</span>,</div><div class="line">      name: <span class="string">'[name]_dll'</span>,</div><div class="line">      context: __dirname,</div><div class="line">    &#125;),</div><div class="line">  ],</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来，在我们进行<code>webpack</code>的正式打包之前可以先来一个预打包，运行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack --config ddl.donfig.js</div></pre></td></tr></table></figure>
<p>命令结束之后，我们可以在<code>BUILD_PATH</code>下面生成了一个<code>vendors.dll.js</code>(具体的名称根据你的配置而来)以及根目录下面的<code>manifset.json</code>文件。打开这个文件，可以看到<code>webpack.DllPlugin</code>插件为每个第三方包都生成了一个唯一的全局id。</p>
<blockquote>
<p>上面的这个插件的配置有几个需要注意的地方，<code>output.library</code>属性是必须的，同时<code>webpack.DllPlugin</code>参数对象的<code>name</code>属性和其保持一致。更详细的配置可以参考文档。</p>
</blockquote>
<p>预打包之后，我们需要对我们的主<code>webpack.config.js</code>文件做如下改动。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//..........................</span></div><div class="line">    plugins:[</div><div class="line">        <span class="comment">// ........</span></div><div class="line">        <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</div><div class="line">            context: __dirname,</div><div class="line">            manifest: <span class="built_in">require</span>(<span class="string">'./manifest.json'</span>),</div><div class="line">            <span class="comment">// 上述生成的文件的名称</span></div><div class="line">            name:<span class="string">"vendors_dll"</span></div><div class="line">        &#125;),</div><div class="line">        <span class="comment">//.........</span></div><div class="line">    ]</div><div class="line"><span class="comment">//..........................</span></div></pre></td></tr></table></figure>
<p>配置很简单，详细的配置小伙伴可以参考文档按需索取。这里有几个需要注意的地方给大家说明一下。</p>
<ol>
<li><p><code>vendors.dll.js</code>文件一定要在引入我们的<code>html</code>文件中，而且在引入模块文件之前引入，否则你会看到这个错误。<br><img src="/images/dll-error.jpeg" alt="dll-error"><br>(骚年，有没有觉得菊花一紧)</p>
</li>
<li><p>但是，有些情况下，我们使用的是<code>html-webpack-plugin</code>来动态创建我们的<code>html</code>模板，这个时候我们怎么把生成的<code>vendors.dll.js</code>引入到我们的页面中呢？路径可以写死，但是你试试，反正我遇到了这个错误。如果你的可以，欢迎在<code>github</code>上留言交流。<br><img src="/images/reference-error.jpeg" alt="dll-error"></p>
</li>
<li><p>当你遇到这个错误，别灰心，接着找解决方法。原来，还真有，就是下面即将介绍的这个插件：<a href="https://github.com/SimenB/add-asset-html-webpack-plugin" target="_blank" rel="external">add-asset-html-webpack-plugin</a><br>。这个插件的主要作用就是将我们自己的静态文件插入到模版生成的<code>html</code>文件中。所以需要对<code>webpack.config.js</code>作出如下的改动。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> AddAssetHtmlPlugin = <span class="built_in">require</span>(<span class="string">'add-asset-html-webpack-plugin'</span>);</div><div class="line"><span class="comment">//..........................</span></div><div class="line">    plugins:[</div><div class="line">        <span class="comment">// ........</span></div><div class="line">       <span class="keyword">new</span> AddAssetHtmlPlugin(&#123;</div><div class="line">            filepath: BUILD_PATH + <span class="string">'/app/dist/*.dll.js'</span>,</div><div class="line">            includeSourcemap: <span class="literal">false</span></div><div class="line">        &#125;),</div><div class="line">        <span class="comment">//.........</span></div><div class="line">    ]</div><div class="line"><span class="comment">//..........................</span></div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p><code>includeSourcemap</code>选项如果不配置的话，可能会遇到<code>vendors.dll.js.map cannot found</code>的错误</p>
</blockquote>
<p>然后，运行，bingo。至此，打包时间已经从<code>100s</code>左右降到了<code>35s</code>左右。恭喜恭喜。</p>
<h3 id="webpack-parallel-uglify-plugin"><a href="#webpack-parallel-uglify-plugin" class="headerlink" title="webpack-parallel-uglify-plugin"></a><code>webpack-parallel-uglify-plugin</code></h3><blockquote>
<p><a href="https://github.com/gdborton/webpack-parallel-uglify-plugin" target="_blank" rel="external">https://github.com/gdborton/webpack-parallel-uglify-plugin</a></p>
</blockquote>
<p>这个插件的用处十分的强大，并行压缩<code>javascript</code>，配置也十分简单，参考官方文档就能知道怎么使用，如我们的配置文件就做了如下的变动。</p>
<p><strong>原js文件</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">config.plugins.push(<span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</div><div class="line">    <span class="comment">// suppress uglify warnings in production</span></div><div class="line">    <span class="comment">// output from these warnings was causing Heroku builds to fail (#5410)</span></div><div class="line">    compress: &#123;</div><div class="line">        warnings: <span class="literal">false</span>,</div><div class="line">    &#125;,</div><div class="line">    output: &#123;</div><div class="line">        comments: <span class="literal">false</span>,</div><div class="line">    &#125;,</div><div class="line">    mangle: &#123;</div><div class="line">        <span class="comment">// this is required to ensure we don't minify Chevrotain token identifiers</span></div><div class="line">        <span class="comment">// https://github.com/SAP/chevrotain/tree/master/examples/parser/minification</span></div><div class="line">        except: allTokens.map(<span class="function"><span class="keyword">function</span>(<span class="params">currTok</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> chevrotain.tokenName(currTok);</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;))</div></pre></td></tr></table></figure>
<p><strong>变动后</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">config.plugins.push(<span class="keyword">new</span> ParallelUglifyPlugin(&#123;</div><div class="line">        uglifyJs:&#123;</div><div class="line">            compress: &#123;</div><div class="line">                warnings: <span class="literal">false</span>,</div><div class="line">            &#125;,</div><div class="line">            output: &#123;</div><div class="line">                comments: <span class="literal">false</span>,</div><div class="line">            &#125;,</div><div class="line">            mangle: &#123;</div><div class="line">                <span class="comment">// this is required to ensure we don't minify Chevrotain token identifiers</span></div><div class="line">                <span class="comment">// https://github.com/SAP/chevrotain/tree/master/examples/parser/minification</span></div><div class="line">                except: allTokens.map(<span class="function"><span class="keyword">function</span>(<span class="params">currTok</span>) </span>&#123;</div><div class="line">                    <span class="keyword">return</span> chevrotain.tokenName(currTok);</div><div class="line">                &#125;)</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        cacheDir: <span class="string">'.js-cache'</span></div><div class="line">    &#125;))</div></pre></td></tr></table></figure>
<p>至此，我们大部分的优化的内容已经完成，下面是我们打包时间的一个对比。<br><strong>优化前打包时间</strong><br><img src="/images/pre-improve.jpeg" alt="pre-improve"><br><strong>优化后打包时间</strong><br><img src="/images/after-improve.jpeg" alt="pre-improve"></p>
<p>除了上述的几个可以优化的地方，还有很多一些小点可以进行优化，比如：</p>
<ol>
<li>css-loader在0.15.0之后的版本打包时间明显增长</li>
<li>我们也可以适当的缩短一下模块的查询路径等</li>
</ol>
<p>如果你有好的优化点，欢迎在我的<a href="https://github.com/pavoooo" target="_blank" rel="external">github</a>留言交流哈！！！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;webpack&lt;/code&gt;是当下前端界中最著名的一个模块加载工具，&lt;code&gt;react&lt;/code&gt;和&lt;code&gt;vue&lt;/code&gt;也都是用其作为项目的开发工具之一。小组最近在二次开发一个开源项目，前端主要使用的技术栈试&lt;code&gt;react+redux+
    
    </summary>
    
    
  </entry>
  
</feed>
