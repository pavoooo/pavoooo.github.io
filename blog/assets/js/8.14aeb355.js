(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{198:function(s,t,n){"use strict";n.r(t);var a=n(0),e=Object(a.a)({},function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("div",{staticClass:"content"},[n("h1",[s._v("react-start到co源码系列三")]),s._v(" "),s._m(0),s._v(" "),n("ul",[n("li",[s._v("第一篇--"),n("router-link",{attrs:{to:"./react-start到co源码系列一.html"}},[s._v("快速搭建一个"),n("code",[s._v("react")]),s._v("开发环境。")])],1),s._v(" "),n("li",[s._v("第二篇--"),n("router-link",{attrs:{to:"./react-start到co源码系列二.html"}},[s._v("快速开发一个"),n("code",[s._v("react")]),s._v("开发环境脚手架工具")]),s._v("。有了这个工具，在任何地方都能够一键生成环境。")],1),s._v(" "),n("li",[s._v("第三篇--"),n("router-link",{attrs:{to:"./react-start到co源码系列三.html"}},[s._v("脚手架依赖的核心库"),n("code",[s._v("co")]),s._v("的源码解析。")])],1)]),s._v(" "),n("p",[s._v("该篇是这个系列文章的第三篇,主要是对"),n("code",[s._v("co")]),s._v("的源码进行分析讲解。"),n("code",[s._v("co")]),s._v("的源码十分简单,但实现的功能却是十分的强大。不了解的同学可以通过"),n("a",{attrs:{href:"https://github.com/tj/co",target:"_blank",rel:"noopener noreferrer"}},[s._v("co"),n("OutboundLink")],1),s._v("自行学习,也可以通过我这篇源码分析的文章进行更深入的学习。")]),s._v(" "),s._m(1),s._v(" "),s._m(2),s._v(" "),s._m(3),s._v(" "),s._m(4),s._v(" "),s._m(5),s._v(" "),s._m(6),s._v(" "),s._m(7),s._v(" "),s._m(8),s._v(" "),s._m(9),s._m(10)])},[function(){var s=this.$createElement,t=this._self._c||s;return t("p",[this._v("react作为当前十分流行的前端框架，相信很多前端er都有蠢蠢欲动的学习它的想法。工欲善其事，必先利其器。这篇文章就简单的给大家介绍一下如何我快速的搭建一个"),t("code",[this._v("react")]),this._v("前端开发环境。主要针对于"),t("code",[this._v("react")]),this._v("小白，大神不喜勿喷。\n从标题可以看出，这里不会仅仅只介绍一下"),t("code",[this._v("react")]),this._v("的开发环境如何搭建。我将这个系列分成三篇介绍:")])},function(){var s=this.$createElement,t=this._self._c||s;return t("h3",{attrs:{id:"co源码概括"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#co源码概括","aria-hidden":"true"}},[this._v("#")]),this._v(" "),t("code",[this._v("co")]),this._v("源码概括")])},function(){var s=this.$createElement,t=this._self._c||s;return t("p",[t("code",[this._v("co")]),this._v("源码主要包含了两部分：公共方法和私有方法。")])},function(){var s=this.$createElement,t=this._self._c||s;return t("h4",{attrs:{id:"_1、公共方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、公共方法","aria-hidden":"true"}},[this._v("#")]),this._v(" 1、公共方法")])},function(){var s=this.$createElement,t=this._self._c||s;return t("ul",[t("li",[t("code",[this._v("co")])]),this._v(" "),t("li",[t("code",[this._v("co.wrap")])])])},function(){var s=this.$createElement,t=this._self._c||s;return t("h4",{attrs:{id:"_2、私有方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、私有方法","aria-hidden":"true"}},[this._v("#")]),this._v(" 2、私有方法")])},function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ul",[n("li",[n("code",[s._v("isObject")])]),s._v(" "),n("li",[n("code",[s._v("isGeneratorFunction")])]),s._v(" "),n("li",[n("code",[s._v("isGenerator")])]),s._v(" "),n("li",[n("code",[s._v("isPromise")])]),s._v(" "),n("li",[n("code",[s._v("objectToPromise")])]),s._v(" "),n("li",[n("code",[s._v("arrayToPromise")])]),s._v(" "),n("li",[n("code",[s._v("thunkToPromise")])]),s._v(" "),n("li",[n("code",[s._v("toPromise")])])])},function(){var s=this.$createElement,t=this._self._c||s;return t("p",[this._v("源码的阅读顺序建议先阅读"),t("code",[this._v("私有方法")]),this._v("的部分,然后在阅读"),t("code",[this._v("公共方法")]),this._v("的部分。各个部分的阅读顺序也按照上面列举的顺序进行阅读。")])},function(){var s=this.$createElement,t=this._self._c||s;return t("h3",{attrs:{id:"co源码分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#co源码分析","aria-hidden":"true"}},[this._v("#")]),this._v(" "),t("code",[this._v("co")]),this._v("源码分析")])},function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token comment"}},[s._v("/**\n * slice() reference.\n */")]),s._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[s._v("var")]),s._v(" slice "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" Array"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("slice"),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("/**\n * Expose `co`.\n */")]),s._v("\n\nmodule"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("exports "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" co"),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{attrs:{class:"token string"}},[s._v("'default'")]),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" co"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("co "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" co"),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\nco"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{attrs:{class:"token function-variable function"}},[s._v("wrap")]),s._v(" "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("fn"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{attrs:{class:"token comment"}},[s._v("// 这个方法的主要作用就是将generator函数转化成普通的函数调用  有点类似于thunk函数的转化")]),s._v("\n  "),n("span",{attrs:{class:"token comment"}},[s._v("/**\n   * function* a(val) {\n   *   return val\n   * }\n   *\n   * console.log(co(a,'pavoooo'))\n   * console.log(co.wrap(a)('pavoooo'))  就可以这样调用了\n   *  */")]),s._v("\n  createPromise"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("__generatorFunction__ "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" fn"),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{attrs:{class:"token keyword"}},[s._v("return")]),s._v(" createPromise"),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{attrs:{class:"token function"}},[s._v("createPromise")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{attrs:{class:"token keyword"}},[s._v("return")]),s._v(" co"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{attrs:{class:"token function"}},[s._v("call")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{attrs:{class:"token keyword"}},[s._v("this")]),n("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" fn"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{attrs:{class:"token function"}},[s._v("apply")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{attrs:{class:"token keyword"}},[s._v("this")]),n("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" arguments"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{attrs:{class:"token function"}},[s._v("co")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("gen"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{attrs:{class:"token keyword"}},[s._v("var")]),s._v(" ctx "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{attrs:{class:"token keyword"}},[s._v("this")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{attrs:{class:"token keyword"}},[s._v("var")]),s._v(" args "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" slice"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{attrs:{class:"token function"}},[s._v("call")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arguments"),n("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{attrs:{class:"token number"}},[s._v("1")]),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n  "),n("span",{attrs:{class:"token comment"}},[s._v("// co的调用结果是一个promise对象")]),s._v("\n  "),n("span",{attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{attrs:{class:"token class-name"}},[s._v("Promise")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{attrs:{class:"token keyword"}},[s._v("function")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("resolve"),n("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" reject"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{attrs:{class:"token comment"}},[s._v("// 如果co的第一个参数是函数的话 就将第二个以及后续的参数传递给这个函数")]),s._v("\n    "),n("span",{attrs:{class:"token comment"}},[s._v("// 并将gen的调用结果赋给gen")]),s._v("\n    "),n("span",{attrs:{class:"token comment"}},[s._v("/**\n     * co(function(){\n     *    console.log(arguments)\n     *  }, 1, 2, 3)\n     * 不考虑下面转化的情况 这个函数运行之后 会打印出{ '0': 1, '1': 2, '2': 3 }\n     * 同时gen的值就是undefined\n     */")]),s._v("\n    "),n("span",{attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{attrs:{class:"token keyword"}},[s._v("typeof")]),s._v(" gen "),n("span",{attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),n("span",{attrs:{class:"token string"}},[s._v("'function'")]),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" gen "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" gen"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{attrs:{class:"token function"}},[s._v("apply")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ctx"),n("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" args"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{attrs:{class:"token comment"}},[s._v("// 这个条件判断的就是 如果gen调用之后的返回值是undefined或者不是一个generator函数 直接将promise的状态转化成resolved")]),s._v("\n    "),n("span",{attrs:{class:"token comment"}},[s._v("// 同时将返回值作为resolved的状态值释放 也就是说co函数的参数应该是一个generator函数")]),s._v("\n    "),n("span",{attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{attrs:{class:"token operator"}},[s._v("!")]),s._v("gen "),n("span",{attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),n("span",{attrs:{class:"token keyword"}},[s._v("typeof")]),s._v(" gen"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),n("span",{attrs:{class:"token operator"}},[s._v("!==")]),s._v(" "),n("span",{attrs:{class:"token string"}},[s._v("'function'")]),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{attrs:{class:"token function"}},[s._v("resolve")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("gen"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),n("span",{attrs:{class:"token comment"}},[s._v("// 调用onFulfilled函数--递归的调用generator函数的next方法")]),s._v("\n    "),n("span",{attrs:{class:"token function"}},[s._v("onFulfilled")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{attrs:{class:"token function"}},[s._v("onFulfilled")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("res"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),n("span",{attrs:{class:"token keyword"}},[s._v("var")]),s._v(" ret"),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),n("span",{attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{attrs:{class:"token comment"}},[s._v("// 这个语句有两重作用")]),s._v("\n        "),n("span",{attrs:{class:"token comment"}},[s._v("// 一、接收上一个yield返回的值")]),s._v("\n        "),n("span",{attrs:{class:"token comment"}},[s._v("// 二、将调用之后的遍历器赋值给ret并传递到next函数中以判断gen调用是否结束")]),s._v("\n        ret "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" gen"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{attrs:{class:"token function"}},[s._v("next")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("res"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),n("span",{attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{attrs:{class:"token class-name"}},[s._v("e")]),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{attrs:{class:"token function"}},[s._v("reject")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n      "),n("span",{attrs:{class:"token comment"}},[s._v("// 递归的调用next 也是是递归的执行gen函数的yield语句")]),s._v("\n      "),n("span",{attrs:{class:"token function"}},[s._v("next")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ret"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{attrs:{class:"token function"}},[s._v("onRejected")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("err"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),n("span",{attrs:{class:"token keyword"}},[s._v("var")]),s._v(" ret"),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),n("span",{attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{attrs:{class:"token comment"}},[s._v("// 这个函数主要是当yield后的语句不符合规定的类型的时候 向外抛出一个错误")]),s._v("\n        ret "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" gen"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{attrs:{class:"token keyword"}},[s._v("throw")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("err"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),n("span",{attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{attrs:{class:"token class-name"}},[s._v("e")]),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{attrs:{class:"token function"}},[s._v("reject")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n      "),n("span",{attrs:{class:"token function"}},[s._v("next")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ret"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{attrs:{class:"token function"}},[s._v("next")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ret"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),n("span",{attrs:{class:"token comment"}},[s._v("// 如果generator函数运行结束 直接释放结果 这个结果就是gen函数中return的结果 这就可以在外部通过then方法接收")]),s._v("\n      "),n("span",{attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ret"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("done"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{attrs:{class:"token function"}},[s._v("resolve")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ret"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("value"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),n("span",{attrs:{class:"token comment"}},[s._v("// 否则将遍历器对应的value转化成promise")]),s._v("\n      "),n("span",{attrs:{class:"token keyword"}},[s._v("var")]),s._v(" value "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" toPromise"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{attrs:{class:"token function"}},[s._v("call")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ctx"),n("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ret"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("value"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),n("span",{attrs:{class:"token comment"}},[s._v("// 如果能够成功的转化成promise 调用then方法 将值释放出来 并将其作为onFulfilled函数的参数  而在onFulfilled函数内部  又通过")]),s._v("\n      "),n("span",{attrs:{class:"token comment"}},[s._v("// gen.next()接收 这样 就可以把每次gen.next().value保存在gen函数内部的变量")]),s._v("\n      "),n("span",{attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value "),n("span",{attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),n("span",{attrs:{class:"token function"}},[s._v("isPromise")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{attrs:{class:"token keyword"}},[s._v("return")]),s._v(" value"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{attrs:{class:"token function"}},[s._v("then")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("onFulfilled"),n("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" onRejected"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),n("span",{attrs:{class:"token comment"}},[s._v("// 这里表示传递给co函数的generator函数的yield后的语句必须是一个function, promise, generator, array, or object")]),s._v("\n      "),n("span",{attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{attrs:{class:"token function"}},[s._v("onRejected")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{attrs:{class:"token class-name"}},[s._v("TypeError")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{attrs:{class:"token string"}},[s._v("'You may only yield a function, promise, generator, array, or object, '")]),s._v("\n        "),n("span",{attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),n("span",{attrs:{class:"token string"}},[s._v("'but the following object was passed: \"'")]),s._v(" "),n("span",{attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),n("span",{attrs:{class:"token function"}},[s._v("String")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ret"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("value"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),n("span",{attrs:{class:"token string"}},[s._v("'\"'")]),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{attrs:{class:"token function"}},[s._v("toPromise")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{attrs:{class:"token comment"}},[s._v("// 这个函数其实是对下面几种将元素转化成promise对象的几个函数的集合  这样做就不需要在各个函数中分别判断值的类型然后")]),s._v("\n  "),n("span",{attrs:{class:"token comment"}},[s._v("// 调用不同的方法  统一交给这个函数根据不同的值的类型调用不同的转换函数")]),s._v("\n  "),n("span",{attrs:{class:"token comment"}},[s._v("// obj是假值")]),s._v("\n  "),n("span",{attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{attrs:{class:"token operator"}},[s._v("!")]),s._v("obj"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{attrs:{class:"token keyword"}},[s._v("return")]),s._v(" obj"),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{attrs:{class:"token comment"}},[s._v("// obj是promise")]),s._v("\n  "),n("span",{attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{attrs:{class:"token function"}},[s._v("isPromise")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{attrs:{class:"token keyword"}},[s._v("return")]),s._v(" obj"),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{attrs:{class:"token comment"}},[s._v("// obj是generation")]),s._v("\n  "),n("span",{attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{attrs:{class:"token function"}},[s._v("isGeneratorFunction")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),n("span",{attrs:{class:"token function"}},[s._v("isGenerator")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{attrs:{class:"token keyword"}},[s._v("return")]),s._v(" co"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{attrs:{class:"token function"}},[s._v("call")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{attrs:{class:"token keyword"}},[s._v("this")]),n("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" obj"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{attrs:{class:"token comment"}},[s._v("// obj是thunk函数")]),s._v("\n  "),n("span",{attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{attrs:{class:"token string"}},[s._v("'function'")]),s._v(" "),n("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{attrs:{class:"token keyword"}},[s._v("typeof")]),s._v(" obj"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{attrs:{class:"token keyword"}},[s._v("return")]),s._v(" thunkToPromise"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{attrs:{class:"token function"}},[s._v("call")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{attrs:{class:"token keyword"}},[s._v("this")]),n("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" obj"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{attrs:{class:"token comment"}},[s._v("// obj是数组")]),s._v("\n  "),n("span",{attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Array"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{attrs:{class:"token function"}},[s._v("isArray")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{attrs:{class:"token keyword"}},[s._v("return")]),s._v(" arrayToPromise"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{attrs:{class:"token function"}},[s._v("call")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{attrs:{class:"token keyword"}},[s._v("this")]),n("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" obj"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{attrs:{class:"token comment"}},[s._v("// obj是对象")]),s._v("\n  "),n("span",{attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{attrs:{class:"token function"}},[s._v("isObject")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{attrs:{class:"token keyword"}},[s._v("return")]),s._v(" objectToPromise"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{attrs:{class:"token function"}},[s._v("call")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{attrs:{class:"token keyword"}},[s._v("this")]),n("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" obj"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{attrs:{class:"token comment"}},[s._v("// obj是普通类型的数据且为真 如字符串  数字等")]),s._v("\n  "),n("span",{attrs:{class:"token keyword"}},[s._v("return")]),s._v(" obj"),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{attrs:{class:"token function"}},[s._v("thunkToPromise")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("fn"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{attrs:{class:"token comment"}},[s._v("// thunk函数转换成promise")]),s._v("\n  "),n("span",{attrs:{class:"token comment"}},[s._v("// js的thunk函数就是将多参数函数转换成单参数函数的一种方式")]),s._v("\n  "),n("span",{attrs:{class:"token comment"}},[s._v("// 约定俗成的也是第一个参数是error对象 后续的参数是函数的返回值")]),s._v("\n  "),n("span",{attrs:{class:"token keyword"}},[s._v("var")]),s._v(" ctx "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{attrs:{class:"token keyword"}},[s._v("this")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{attrs:{class:"token class-name"}},[s._v("Promise")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("resolve"),n("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" reject"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    fn"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{attrs:{class:"token function"}},[s._v("call")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ctx"),n("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("err"),n("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" res"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),n("span",{attrs:{class:"token comment"}},[s._v("// error不为空 直接将promise转化成rejected状态")]),s._v("\n      "),n("span",{attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("err"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{attrs:{class:"token function"}},[s._v("reject")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("err"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),n("span",{attrs:{class:"token comment"}},[s._v("// 否则将函数转化成resolve状态")]),s._v("\n      "),n("span",{attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arguments"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length "),n("span",{attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{attrs:{class:"token number"}},[s._v("2")]),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" res "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" slice"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{attrs:{class:"token function"}},[s._v("call")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arguments"),n("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{attrs:{class:"token number"}},[s._v("1")]),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),n("span",{attrs:{class:"token function"}},[s._v("resolve")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("res"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{attrs:{class:"token function"}},[s._v("arrayToPromise")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{attrs:{class:"token comment"}},[s._v("// 数组转化成promise--")]),s._v("\n  "),n("span",{attrs:{class:"token comment"}},[s._v("// 先将数组中的各个元素转化成promise 然后通过Promise.all进行包装  转化成一个新的promise实例并返回")]),s._v("\n  "),n("span",{attrs:{class:"token keyword"}},[s._v("return")]),s._v(" Promise"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{attrs:{class:"token function"}},[s._v("all")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{attrs:{class:"token function"}},[s._v("map")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("toPromise"),n("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{attrs:{class:"token keyword"}},[s._v("this")]),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("/**\n * 这个函数是将一个对象转换成promise对象 从isPromise函数的内部可知\n * 把对象转换成promise对象的前提就是 这个对象必须具有then方法 也是是必须是一个thenable对象\n */")]),s._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{attrs:{class:"token function"}},[s._v("objectToPromise")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{attrs:{class:"token comment"}},[s._v("// 通过obj的constructor 创建出一个新的对象 这个对象拥有obj所有继承的属性 这样就可以在这个对象上进行转化 从而防止了更改源对象")]),s._v("\n  "),n("span",{attrs:{class:"token keyword"}},[s._v("var")]),s._v(" results "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{attrs:{class:"token class-name"}},[s._v("obj"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("constructor")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{attrs:{class:"token comment"}},[s._v("//获取到obj的所有非继承属性的键组成的数组")]),s._v("\n  "),n("span",{attrs:{class:"token keyword"}},[s._v("var")]),s._v(" keys "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" Object"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{attrs:{class:"token function"}},[s._v("keys")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{attrs:{class:"token comment"}},[s._v("// 定义一个promise容器  并传递给Promise.all这个方法")]),s._v("\n  "),n("span",{attrs:{class:"token keyword"}},[s._v("var")]),s._v(" promises "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{attrs:{class:"token keyword"}},[s._v("var")]),s._v(" i "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{attrs:{class:"token number"}},[s._v("0")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),n("span",{attrs:{class:"token operator"}},[s._v("<")]),s._v(" keys"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),n("span",{attrs:{class:"token operator"}},[s._v("++")]),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{attrs:{class:"token keyword"}},[s._v("var")]),s._v(" key "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" keys"),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{attrs:{class:"token comment"}},[s._v("// 根据值的类型调用对应的转换函数转换成promise对象")]),s._v("\n    "),n("span",{attrs:{class:"token keyword"}},[s._v("var")]),s._v(" promise "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" toPromise"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{attrs:{class:"token function"}},[s._v("call")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{attrs:{class:"token keyword"}},[s._v("this")]),n("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" obj"),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{attrs:{class:"token comment"}},[s._v("// 这个if条件中的第一个条件 是容错处理 如果isPromise用的很多的情况下  建议将这个容错处理")]),s._v("\n    "),n("span",{attrs:{class:"token comment"}},[s._v("// 放在isPromise函数中 转换之后的值是promise 就调用then方法  取出promise对象中返回的值  ")]),s._v("\n    "),n("span",{attrs:{class:"token comment"}},[s._v("// 然后其设置为对应键的值")]),s._v("\n    "),n("span",{attrs:{class:"token comment"}},[s._v("/**\n     * 也就是说 如果一个对象是如下的形式：\n     * var a = {\n     *    p: new Promise((resolve, reject) => {\n     *       resolve(2)\n     * }) \n     * }\n     * \n     * 经过defer函数的转换之后a.p = 3\n     */")]),s._v("\n    "),n("span",{attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("promise "),n("span",{attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),n("span",{attrs:{class:"token function"}},[s._v("isPromise")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("promise"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{attrs:{class:"token function"}},[s._v("defer")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("promise"),n("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" key"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{attrs:{class:"token comment"}},[s._v("// 如果不是promise就直接返回对应的值")]),s._v("\n    "),n("span",{attrs:{class:"token keyword"}},[s._v("else")]),s._v(" results"),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" obj"),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),n("span",{attrs:{class:"token comment"}},[s._v("// 通过Promise.all将多个promise实例转化成一个新的实例 并返回")]),s._v("\n  "),n("span",{attrs:{class:"token keyword"}},[s._v("return")]),s._v(" Promise"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{attrs:{class:"token function"}},[s._v("all")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("promises"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{attrs:{class:"token function"}},[s._v("then")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{attrs:{class:"token keyword"}},[s._v("return")]),s._v(" results"),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),n("span",{attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{attrs:{class:"token function"}},[s._v("defer")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("promise"),n("span",{attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" key"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{attrs:{class:"token comment"}},[s._v("// predefine the key in the result")]),s._v("\n    results"),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" undefined"),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    promises"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{attrs:{class:"token function"}},[s._v("push")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("promise"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{attrs:{class:"token function"}},[s._v("then")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("res"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      results"),n("span",{attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key"),n("span",{attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" res"),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("/**\n * 判断obj是不是一个promise对象 \n * 根据promise A+的规范\n * 一个合格的promise必须是一个thenable对象也就是其必须提供一个then方法来获取值\n * 所以我们可以通过判断一个对象是否具有then方法来判断是不是promise对象 但这不是绝对准确的方法 co内部通过Promise.all这个\n * 方法对isPromise()返回true的对象进行了封装  都可以将其转化成promise对象  所以在使用的时候不需要过多的担心\n */")]),s._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{attrs:{class:"token function"}},[s._v("isPromise")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{attrs:{class:"token string"}},[s._v("'function'")]),s._v(" "),n("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{attrs:{class:"token keyword"}},[s._v("typeof")]),s._v(" obj"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("then"),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{attrs:{class:"token function"}},[s._v("isGenerator")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{attrs:{class:"token string"}},[s._v("'function'")]),s._v(" "),n("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{attrs:{class:"token keyword"}},[s._v("typeof")]),s._v(" obj"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("next "),n("span",{attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),n("span",{attrs:{class:"token string"}},[s._v("'function'")]),s._v(" "),n("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{attrs:{class:"token keyword"}},[s._v("typeof")]),s._v(" obj"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{attrs:{class:"token keyword"}},[s._v("throw")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("/** \n * 判断参数obj是不是一个generator函数\n */")]),s._v("\n"),n("span",{attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{attrs:{class:"token function"}},[s._v("isGeneratorFunction")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{attrs:{class:"token keyword"}},[s._v("var")]),s._v(" constructor "),n("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" obj"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("constructor"),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{attrs:{class:"token operator"}},[s._v("!")]),s._v("constructor"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{attrs:{class:"token boolean"}},[s._v("false")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{attrs:{class:"token comment"}},[s._v("/**\n   * 判断是不是一个generator函数\n   * function* gen() {}  ====> gen.constructor.name = 'GeneratorFunction'\n   * 同时这个if条件也是对以下的这种情况作的判断\n   * function* gen() {}  \n   * var g = gen() ====> g.constructor.name = 'GeneratorFunction'\n   * \n   * displayName是一个非标准的属性 用于返回函数显示的名称 不推荐使用\n   *  */")]),s._v("\n  "),n("span",{attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{attrs:{class:"token string"}},[s._v("'GeneratorFunction'")]),s._v(" "),n("span",{attrs:{class:"token operator"}},[s._v("===")]),s._v(" constructor"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),n("span",{attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),n("span",{attrs:{class:"token string"}},[s._v("'GeneratorFunction'")]),s._v(" "),n("span",{attrs:{class:"token operator"}},[s._v("===")]),s._v(" constructor"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("displayName"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{attrs:{class:"token boolean"}},[s._v("true")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),n("span",{attrs:{class:"token comment"}},[s._v("/**\n   * obj是通过原生的generator函数操作得出  即\n   * obj = generator()\n   * obj = Object.create(generator)\n   * obj = Object.create(generator())\n   * \n   * 上面if条件都会返回true\n   * \n   * 下面的这个isGenerator函数  笔者猜测\n   * 一是对原生generator函数调用之后返回的迭代器的判断\n   * 而是对自定义的generator函数的判断\n   * 比如这种形式的返回结果也是true\n   * function A() {}\n   * A.prototype.next = function() {\n   *    return {\n   *        value: 1,\n   *        done: false\n   *     }\n   * }\n   * Aa.prototype.throw = function() {}\n   *\n   * var a = new A()\n   * console.log(isGeneratorFunction(a))\n   *  */")]),s._v("\n  "),n("span",{attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{attrs:{class:"token function"}},[s._v("isGenerator")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("constructor"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{attrs:{class:"token comment"}},[s._v("/**\n * 用于判断一个对象是不是纯粹的js对象\n * js中纯粹的对象一般有三种创建方式\n * var obj = {}\n * var obj = new Object\n * var obj = Object.create(Object.prototype)\n */")]),s._v("\n"),n("span",{attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{attrs:{class:"token function"}},[s._v("isObject")]),n("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("val"),n("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{attrs:{class:"token keyword"}},[s._v("return")]),s._v(" Object "),n("span",{attrs:{class:"token operator"}},[s._v("==")]),s._v(" val"),n("span",{attrs:{class:"token punctuation"}},[s._v(".")]),s._v("constructor"),n("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br"),n("span",{staticClass:"line-number"},[s._v("74")]),n("br"),n("span",{staticClass:"line-number"},[s._v("75")]),n("br"),n("span",{staticClass:"line-number"},[s._v("76")]),n("br"),n("span",{staticClass:"line-number"},[s._v("77")]),n("br"),n("span",{staticClass:"line-number"},[s._v("78")]),n("br"),n("span",{staticClass:"line-number"},[s._v("79")]),n("br"),n("span",{staticClass:"line-number"},[s._v("80")]),n("br"),n("span",{staticClass:"line-number"},[s._v("81")]),n("br"),n("span",{staticClass:"line-number"},[s._v("82")]),n("br"),n("span",{staticClass:"line-number"},[s._v("83")]),n("br"),n("span",{staticClass:"line-number"},[s._v("84")]),n("br"),n("span",{staticClass:"line-number"},[s._v("85")]),n("br"),n("span",{staticClass:"line-number"},[s._v("86")]),n("br"),n("span",{staticClass:"line-number"},[s._v("87")]),n("br"),n("span",{staticClass:"line-number"},[s._v("88")]),n("br"),n("span",{staticClass:"line-number"},[s._v("89")]),n("br"),n("span",{staticClass:"line-number"},[s._v("90")]),n("br"),n("span",{staticClass:"line-number"},[s._v("91")]),n("br"),n("span",{staticClass:"line-number"},[s._v("92")]),n("br"),n("span",{staticClass:"line-number"},[s._v("93")]),n("br"),n("span",{staticClass:"line-number"},[s._v("94")]),n("br"),n("span",{staticClass:"line-number"},[s._v("95")]),n("br"),n("span",{staticClass:"line-number"},[s._v("96")]),n("br"),n("span",{staticClass:"line-number"},[s._v("97")]),n("br"),n("span",{staticClass:"line-number"},[s._v("98")]),n("br"),n("span",{staticClass:"line-number"},[s._v("99")]),n("br"),n("span",{staticClass:"line-number"},[s._v("100")]),n("br"),n("span",{staticClass:"line-number"},[s._v("101")]),n("br"),n("span",{staticClass:"line-number"},[s._v("102")]),n("br"),n("span",{staticClass:"line-number"},[s._v("103")]),n("br"),n("span",{staticClass:"line-number"},[s._v("104")]),n("br"),n("span",{staticClass:"line-number"},[s._v("105")]),n("br"),n("span",{staticClass:"line-number"},[s._v("106")]),n("br"),n("span",{staticClass:"line-number"},[s._v("107")]),n("br"),n("span",{staticClass:"line-number"},[s._v("108")]),n("br"),n("span",{staticClass:"line-number"},[s._v("109")]),n("br"),n("span",{staticClass:"line-number"},[s._v("110")]),n("br"),n("span",{staticClass:"line-number"},[s._v("111")]),n("br"),n("span",{staticClass:"line-number"},[s._v("112")]),n("br"),n("span",{staticClass:"line-number"},[s._v("113")]),n("br"),n("span",{staticClass:"line-number"},[s._v("114")]),n("br"),n("span",{staticClass:"line-number"},[s._v("115")]),n("br"),n("span",{staticClass:"line-number"},[s._v("116")]),n("br"),n("span",{staticClass:"line-number"},[s._v("117")]),n("br"),n("span",{staticClass:"line-number"},[s._v("118")]),n("br"),n("span",{staticClass:"line-number"},[s._v("119")]),n("br"),n("span",{staticClass:"line-number"},[s._v("120")]),n("br"),n("span",{staticClass:"line-number"},[s._v("121")]),n("br"),n("span",{staticClass:"line-number"},[s._v("122")]),n("br"),n("span",{staticClass:"line-number"},[s._v("123")]),n("br"),n("span",{staticClass:"line-number"},[s._v("124")]),n("br"),n("span",{staticClass:"line-number"},[s._v("125")]),n("br"),n("span",{staticClass:"line-number"},[s._v("126")]),n("br"),n("span",{staticClass:"line-number"},[s._v("127")]),n("br"),n("span",{staticClass:"line-number"},[s._v("128")]),n("br"),n("span",{staticClass:"line-number"},[s._v("129")]),n("br"),n("span",{staticClass:"line-number"},[s._v("130")]),n("br"),n("span",{staticClass:"line-number"},[s._v("131")]),n("br"),n("span",{staticClass:"line-number"},[s._v("132")]),n("br"),n("span",{staticClass:"line-number"},[s._v("133")]),n("br"),n("span",{staticClass:"line-number"},[s._v("134")]),n("br"),n("span",{staticClass:"line-number"},[s._v("135")]),n("br"),n("span",{staticClass:"line-number"},[s._v("136")]),n("br"),n("span",{staticClass:"line-number"},[s._v("137")]),n("br"),n("span",{staticClass:"line-number"},[s._v("138")]),n("br"),n("span",{staticClass:"line-number"},[s._v("139")]),n("br"),n("span",{staticClass:"line-number"},[s._v("140")]),n("br"),n("span",{staticClass:"line-number"},[s._v("141")]),n("br"),n("span",{staticClass:"line-number"},[s._v("142")]),n("br"),n("span",{staticClass:"line-number"},[s._v("143")]),n("br"),n("span",{staticClass:"line-number"},[s._v("144")]),n("br"),n("span",{staticClass:"line-number"},[s._v("145")]),n("br"),n("span",{staticClass:"line-number"},[s._v("146")]),n("br"),n("span",{staticClass:"line-number"},[s._v("147")]),n("br"),n("span",{staticClass:"line-number"},[s._v("148")]),n("br"),n("span",{staticClass:"line-number"},[s._v("149")]),n("br"),n("span",{staticClass:"line-number"},[s._v("150")]),n("br"),n("span",{staticClass:"line-number"},[s._v("151")]),n("br"),n("span",{staticClass:"line-number"},[s._v("152")]),n("br"),n("span",{staticClass:"line-number"},[s._v("153")]),n("br"),n("span",{staticClass:"line-number"},[s._v("154")]),n("br"),n("span",{staticClass:"line-number"},[s._v("155")]),n("br"),n("span",{staticClass:"line-number"},[s._v("156")]),n("br"),n("span",{staticClass:"line-number"},[s._v("157")]),n("br"),n("span",{staticClass:"line-number"},[s._v("158")]),n("br"),n("span",{staticClass:"line-number"},[s._v("159")]),n("br"),n("span",{staticClass:"line-number"},[s._v("160")]),n("br"),n("span",{staticClass:"line-number"},[s._v("161")]),n("br"),n("span",{staticClass:"line-number"},[s._v("162")]),n("br"),n("span",{staticClass:"line-number"},[s._v("163")]),n("br"),n("span",{staticClass:"line-number"},[s._v("164")]),n("br"),n("span",{staticClass:"line-number"},[s._v("165")]),n("br"),n("span",{staticClass:"line-number"},[s._v("166")]),n("br"),n("span",{staticClass:"line-number"},[s._v("167")]),n("br"),n("span",{staticClass:"line-number"},[s._v("168")]),n("br"),n("span",{staticClass:"line-number"},[s._v("169")]),n("br"),n("span",{staticClass:"line-number"},[s._v("170")]),n("br"),n("span",{staticClass:"line-number"},[s._v("171")]),n("br"),n("span",{staticClass:"line-number"},[s._v("172")]),n("br"),n("span",{staticClass:"line-number"},[s._v("173")]),n("br"),n("span",{staticClass:"line-number"},[s._v("174")]),n("br"),n("span",{staticClass:"line-number"},[s._v("175")]),n("br"),n("span",{staticClass:"line-number"},[s._v("176")]),n("br"),n("span",{staticClass:"line-number"},[s._v("177")]),n("br"),n("span",{staticClass:"line-number"},[s._v("178")]),n("br"),n("span",{staticClass:"line-number"},[s._v("179")]),n("br"),n("span",{staticClass:"line-number"},[s._v("180")]),n("br"),n("span",{staticClass:"line-number"},[s._v("181")]),n("br"),n("span",{staticClass:"line-number"},[s._v("182")]),n("br"),n("span",{staticClass:"line-number"},[s._v("183")]),n("br"),n("span",{staticClass:"line-number"},[s._v("184")]),n("br"),n("span",{staticClass:"line-number"},[s._v("185")]),n("br"),n("span",{staticClass:"line-number"},[s._v("186")]),n("br"),n("span",{staticClass:"line-number"},[s._v("187")]),n("br"),n("span",{staticClass:"line-number"},[s._v("188")]),n("br"),n("span",{staticClass:"line-number"},[s._v("189")]),n("br"),n("span",{staticClass:"line-number"},[s._v("190")]),n("br"),n("span",{staticClass:"line-number"},[s._v("191")]),n("br"),n("span",{staticClass:"line-number"},[s._v("192")]),n("br"),n("span",{staticClass:"line-number"},[s._v("193")]),n("br"),n("span",{staticClass:"line-number"},[s._v("194")]),n("br"),n("span",{staticClass:"line-number"},[s._v("195")]),n("br"),n("span",{staticClass:"line-number"},[s._v("196")]),n("br"),n("span",{staticClass:"line-number"},[s._v("197")]),n("br"),n("span",{staticClass:"line-number"},[s._v("198")]),n("br"),n("span",{staticClass:"line-number"},[s._v("199")]),n("br"),n("span",{staticClass:"line-number"},[s._v("200")]),n("br"),n("span",{staticClass:"line-number"},[s._v("201")]),n("br"),n("span",{staticClass:"line-number"},[s._v("202")]),n("br"),n("span",{staticClass:"line-number"},[s._v("203")]),n("br"),n("span",{staticClass:"line-number"},[s._v("204")]),n("br"),n("span",{staticClass:"line-number"},[s._v("205")]),n("br"),n("span",{staticClass:"line-number"},[s._v("206")]),n("br"),n("span",{staticClass:"line-number"},[s._v("207")]),n("br"),n("span",{staticClass:"line-number"},[s._v("208")]),n("br"),n("span",{staticClass:"line-number"},[s._v("209")]),n("br"),n("span",{staticClass:"line-number"},[s._v("210")]),n("br"),n("span",{staticClass:"line-number"},[s._v("211")]),n("br"),n("span",{staticClass:"line-number"},[s._v("212")]),n("br"),n("span",{staticClass:"line-number"},[s._v("213")]),n("br"),n("span",{staticClass:"line-number"},[s._v("214")]),n("br"),n("span",{staticClass:"line-number"},[s._v("215")]),n("br"),n("span",{staticClass:"line-number"},[s._v("216")]),n("br"),n("span",{staticClass:"line-number"},[s._v("217")]),n("br"),n("span",{staticClass:"line-number"},[s._v("218")]),n("br"),n("span",{staticClass:"line-number"},[s._v("219")]),n("br"),n("span",{staticClass:"line-number"},[s._v("220")]),n("br"),n("span",{staticClass:"line-number"},[s._v("221")]),n("br"),n("span",{staticClass:"line-number"},[s._v("222")]),n("br"),n("span",{staticClass:"line-number"},[s._v("223")]),n("br"),n("span",{staticClass:"line-number"},[s._v("224")]),n("br"),n("span",{staticClass:"line-number"},[s._v("225")]),n("br"),n("span",{staticClass:"line-number"},[s._v("226")]),n("br"),n("span",{staticClass:"line-number"},[s._v("227")]),n("br"),n("span",{staticClass:"line-number"},[s._v("228")]),n("br"),n("span",{staticClass:"line-number"},[s._v("229")]),n("br"),n("span",{staticClass:"line-number"},[s._v("230")]),n("br"),n("span",{staticClass:"line-number"},[s._v("231")]),n("br"),n("span",{staticClass:"line-number"},[s._v("232")]),n("br"),n("span",{staticClass:"line-number"},[s._v("233")]),n("br"),n("span",{staticClass:"line-number"},[s._v("234")]),n("br"),n("span",{staticClass:"line-number"},[s._v("235")]),n("br"),n("span",{staticClass:"line-number"},[s._v("236")]),n("br"),n("span",{staticClass:"line-number"},[s._v("237")]),n("br"),n("span",{staticClass:"line-number"},[s._v("238")]),n("br"),n("span",{staticClass:"line-number"},[s._v("239")]),n("br"),n("span",{staticClass:"line-number"},[s._v("240")]),n("br"),n("span",{staticClass:"line-number"},[s._v("241")]),n("br"),n("span",{staticClass:"line-number"},[s._v("242")]),n("br"),n("span",{staticClass:"line-number"},[s._v("243")]),n("br"),n("span",{staticClass:"line-number"},[s._v("244")]),n("br"),n("span",{staticClass:"line-number"},[s._v("245")]),n("br"),n("span",{staticClass:"line-number"},[s._v("246")]),n("br"),n("span",{staticClass:"line-number"},[s._v("247")]),n("br"),n("span",{staticClass:"line-number"},[s._v("248")]),n("br"),n("span",{staticClass:"line-number"},[s._v("249")]),n("br")])])},function(){var s=this.$createElement,t=this._self._c||s;return t("p",[this._v("以上就是对"),t("code",[this._v("co")]),this._v("源码的大致分析。")])}],!1,null,null,null);e.options.__file="react-start到co源码系列三.md";t.default=e.exports}}]);